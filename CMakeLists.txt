IF(POLICY CMP0026)
    # unable to find a workaround: doc says we should use $<TAGET_FILE> generator expression but
  # - set() doesn't support generator expression
  # - configure_file() doesn't support generator expression
  # - file(GENERATE ) support generator expression bu not variables
 CMAKE_POLICY(SET CMP0026 OLD)
ENDIF()

# Note this only happens when you manually set
# CMAKE_BUILD_TYPE at cmake invocation time.
# This is the case when building release packages on buildbot
IF(CMAKE_BUILD_TYPE STREQUAL Release)

  # library name and location of the dll for the python setup script
  SET(QDB_API_NAME "qdb_api")
  SET(QDB_PY_IMPL ${CMAKE_CURRENT_SOURCE_DIR}/impl.py)
  SET(QDB_PY_INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/__init__.py)
  SET(QDB_PY_WRAPPER qdb_python_wrapper.cxx)

  # get the full path of qdb_api.dll 
  get_target_property(QDB_API_DLL qdb_api LOCATION_Release)

  STRING(TOLOWER ${CMAKE_SYSTEM_NAME} PY_PACKAGE_SOURCE_SUFFIX)

  IF(MSVC)
    SET(ACTUAL_LIBRARY_PATH ${LIBRARY_OUTPUT_PATH}/${CMAKE_BUILD_TYPE})
    SET(QDB_LIBRARIES "'qdb_api'")
    SET(QDB_PYTHON_COMPILE_FLAG 
      /DSTATIC_LINKED # a hack to avoid double export definition because we already set "dllexport" in the source code generated by SWIG except when STATIC_LINKED is set
      /EHsc 
      /MT # overrides the /MD that is send by distutils, this with generate command line warning D9025
    )
    SET(QDB_PYTHON_SWIG_FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/qdb_python_windows.i
        ${CMAKE_CURRENT_SOURCE_DIR}/qdb_python_adapters.i
        ${CMAKE_CURRENT_SOURCE_DIR}/qdb_python_common.i
        ${QDB_COMMON_SWIG_FILES})
    SET(QDB_PYTHON_LIBRARY_GLOB "*.dll")
  ELSE(MSVC)
    SET(ACTUAL_LIBRARY_PATH ${LIBRARY_OUTPUT_PATH})

    IF(CLANG)
      SET(QDB_PYTHON_COMPILE_FLAG -std=c++11 -stdlib=libc++ -fcxx-exceptions -fexceptions)
      # on FreeBSD everything should be in the system      
      SET(QDB_LIBRARIES "'qdb_api', 'c++'")
    ELSE(CLANG)
      SET(QDB_PYTHON_COMPILE_FLAG -std=c++11 -Wno-unused-function)
      SET(QDB_LIBRARIES "'qdb_api'")
    ENDIF(CLANG)

    SET(QDB_PYTHON_SWIG_FILES 
        ${CMAKE_CURRENT_SOURCE_DIR}/qdb_python_unix.i
        ${CMAKE_CURRENT_SOURCE_DIR}/qdb_python_adapters.i
        ${CMAKE_CURRENT_SOURCE_DIR}/qdb_python_common.i
        ${QDB_COMMON_SWIG_FILES})
    SET(QDB_PYTHON_LIBRARY_GLOB "lib*")
  ENDIF(MSVC)

  # generate setup script by replacing CMake variables
  configure_file(prepare_orig.py
                 ${CMAKE_CURRENT_SOURCE_DIR}/prepare.py)

  configure_file(setup_orig.py
                 ${CMAKE_CURRENT_SOURCE_DIR}/setup.py
                 @ONLY)

  configure_file(MANIFEST_orig.in
                 ${CMAKE_CURRENT_SOURCE_DIR}/MANIFEST.in
                 @ONLY)

  # copy readme.txt
  configure_file(${README_TXT_FILE} ${CMAKE_CURRENT_SOURCE_DIR} COPYONLY)

  IF(MSVC)
  # SWIG wrapper
    add_custom_command(OUTPUT ${QDB_PY_WRAPPER}
      COMMAND ${SWIG_EXECUTABLE} ARGS -c++ -python -o ${QDB_PY_WRAPPER} -outdir ${CMAKE_CURRENT_SOURCE_DIR} -O -module impl -interface _qdb qdb_python_windows.i
      DEPENDS qdb_api ${QDB_PYTHON_SWIG_FILES}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      COMMENT "Generating qdb interface for the Python language")
  ELSE(MSVC)
    add_custom_command(OUTPUT ${QDB_PY_WRAPPER}
      COMMAND ${SWIG_EXECUTABLE} ARGS -c++ -python -o ${QDB_PY_WRAPPER} -outdir ${CMAKE_CURRENT_SOURCE_DIR} -O -module impl -interface _qdb qdb_python_unix.i
      DEPENDS qdb_api ${QDB_PYTHON_SWIG_FILES}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      COMMENT "Generating qdb interface for the Python language")
  ENDIF(MSVC)

  add_custom_target(qdb_python_api ALL
       COMMAND ${PYTHON_EXECUTABLE} prepare.py
       COMMENT "Preparing quasardb Python API"
       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
       DEPENDS ${QDB_PY_WRAPPER}
       SOURCES ${QDB_PY_WRAPPER} ${QDB_PYTHON_SWIG_FILES})

  set_target_properties(qdb_python_api PROPERTIES FOLDER ${CLIENT_API_IDE_FOLDER})

  IF(MSVC)
    add_custom_command(
       TARGET qdb_python_api
       COMMAND ${PYTHON_EXECUTABLE} setup.py bdist_wininst
       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
       DEPENDS ${QDB_PY_INTERFACE} ${QDB_PY_IMPL} ${QDB_PY_WRAPPER}
       COMMENT "Preparing quasardb Python API Windows redist"
       POST_BUILD)
  ELSE(MSVC)
    # on Unixes we build only to make sure the library compiles and to allow for the documentation generation to work properly
    # as it will parse the libraries
    # we don't redistribute the generated files
    # this weird wrapping through CMake is hack to enable us to set the "CC" environment variable which enables us to
    # to tell to Python distutils: please use this compiler to build the extension
    IF(CLANG)
      add_custom_command(
         TARGET qdb_python_api
         COMMAND ${CMAKE_COMMAND} -P clang_build_wrap.cmake
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
         DEPENDS ${QDB_PY_INTERFACE} ${QDB_PY_IMPL} ${QDB_PY_WRAPPER}
         COMMENT "Compiling quasardb Python API using clang"
         POST_BUILD)
    ELSE(CLANG)
      add_custom_command(
         TARGET qdb_python_api
         COMMAND ${CMAKE_COMMAND} -P gcc48_build_wrap.cmake
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
         DEPENDS ${QDB_PY_INTERFACE} ${QDB_PY_IMPL} ${QDB_PY_WRAPPER}
         COMMENT "Compiling quasardb Python API using gcc46"
         POST_BUILD)
    ENDIF(CLANG)
  ENDIF(MSVC)

  # dist file
  add_custom_command(
   TARGET qdb_python_api
   COMMAND ${PYTHON_EXECUTABLE} setup.py sdist
   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
   DEPENDS ${QDB_PY_INTERFACE} ${QDB_PY_IMPL} ${QDB_PY_WRAPPER}
   COMMENT "Preparing quasardb Python API source package"
   POST_BUILD)

  # this is needed for the configuration generation we copy the compiler Python extension in an appropriate directory to allow full documentation parsing
  add_custom_target(qdb_python_api_post ALL
    COMMAND ${PYTHON_EXECUTABLE} post_build_copy.py
    COMMENT "Copying binary file for documentation"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS qdb_python_api)

  set_target_properties(qdb_python_api_post PROPERTIES FOLDER ${CLIENT_API_IDE_FOLDER})

ENDIF()
