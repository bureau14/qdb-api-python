from __future__ import annotations

import datetime
from typing import Any

class Entry:
    class Metadata: ...

    class Type:
        Uninitialized: Entry.Type  # value = <Type.Uninitialized: -1>
        Blob: Entry.Type  # value = <Type.Blob: 0>
        Integer: Entry.Type  # value = <Type.Integer: 1>
        HashSet: Entry.Type  # value = <Type.HashSet: 2>
        Tag: Entry.Type  # value = <Type.Tag: 3>
        Deque: Entry.Type  # value = <Type.Deque: 4>
        Stream: Entry.Type  # value = <Type.Stream: 5>
        Timeseries: Entry.Type  # value = <Type.Timeseries: 6>
        __members__: dict[str, Entry.Type]
        def __and__(self, other: Any) -> Any: ...
        def __eq__(self, other: Any) -> bool: ...
        def __ge__(self, other: Any) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: Any) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __init__(self, value: int) -> None: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other: Any) -> bool: ...
        def __lt__(self, other: Any) -> bool: ...
        def __ne__(self, other: Any) -> bool: ...
        def __or__(self, other: Any) -> Any: ...
        def __rand__(self, other: Any) -> Any: ...
        def __repr__(self) -> str: ...
        def __ror__(self, other: Any) -> Any: ...
        def __rxor__(self, other: Any) -> Any: ...
        def __setstate__(self, state: int) -> None: ...
        def __str__(self) -> str: ...
        def __xor__(self, other: Any) -> Any: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    def attach_tag(self, tag: str) -> bool: ...
    def attach_tags(self, tags: list[str]) -> None: ...
    def detach_tag(self, tag: str) -> bool: ...
    def detach_tags(self, tags: list[str]) -> None: ...
    def exists(self) -> bool: ...
    def get_entry_type(self) -> Entry.Type: ...
    def get_location(self) -> tuple[str, int]: ...
    def get_metadata(self) -> Metadata: ...
    def get_name(self) -> str: ...
    def get_tags(self) -> list[str]: ...
    def has_tag(self, tag: str) -> bool: ...
    def remove(self) -> None: ...

class ExpirableEntry(Entry):
    def expires_at(self, expiry_time: datetime.datetime) -> None: ...
    def expires_from_now(self, expiry_delta: datetime.timedelta) -> None: ...
    def get_expiry_time(self) -> datetime.datetime: ...
