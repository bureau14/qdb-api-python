# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _wrpme.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wrpme', [dirname(__file__)])
        except ImportError:
            import _wrpme
            return _wrpme
        if fp is not None:
            try:
                _mod = imp.load_module('_wrpme', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wrpme = swig_import_helper()
    del swig_import_helper
else:
    import _wrpme
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SHARED_PTR_DISOWN = _wrpme.SHARED_PTR_DISOWN
error_ok = _wrpme.error_ok
error_system = _wrpme.error_system
error_internal = _wrpme.error_internal
error_no_memory = _wrpme.error_no_memory
error_invalid_protocol = _wrpme.error_invalid_protocol
error_host_not_found = _wrpme.error_host_not_found
error_invalid_option = _wrpme.error_invalid_option
error_alias_too_long = _wrpme.error_alias_too_long
error_alias_not_found = _wrpme.error_alias_not_found
error_alias_already_exists = _wrpme.error_alias_already_exists
error_timeout = _wrpme.error_timeout
error_buffer_too_small = _wrpme.error_buffer_too_small
error_invalid_command = _wrpme.error_invalid_command
error_invalid_input = _wrpme.error_invalid_input
error_connection_refused = _wrpme.error_connection_refused
error_connection_reset = _wrpme.error_connection_reset
error_unexpected_reply = _wrpme.error_unexpected_reply
error_not_implemented = _wrpme.error_not_implemented
error_unstable_hive = _wrpme.error_unstable_hive
error_protocol_error = _wrpme.error_protocol_error
error_outdated_topology = _wrpme.error_outdated_topology
error_wrong_peer = _wrpme.error_wrong_peer
error_invalid_version = _wrpme.error_invalid_version
error_try_again = _wrpme.error_try_again
error_invalid_argument = _wrpme.error_invalid_argument
error_out_of_bounds = _wrpme.error_out_of_bounds
error_conflict = _wrpme.error_conflict
error_not_connected = _wrpme.error_not_connected
option_log_function = _wrpme.option_log_function
option_log_context = _wrpme.option_log_context
option_operation_timeout = _wrpme.option_operation_timeout

def version():
  return _wrpme.version()
version = _wrpme.version

def build():
  return _wrpme.build()
build = _wrpme.build
class error_carrier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    error = _swig_property(_wrpme.error_carrier_error_get, _wrpme.error_carrier_error_set)
    def __init__(self): 
        _wrpme.error_carrier_swiginit(self,_wrpme.new_error_carrier())
    __swig_destroy__ = _wrpme.delete_error_carrier
error_carrier_swigregister = _wrpme.error_carrier_swigregister
error_carrier_swigregister(error_carrier)

class api_buffer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _wrpme.api_buffer_swiginit(self,_wrpme.new_api_buffer(*args))
    __swig_destroy__ = _wrpme.delete_api_buffer
api_buffer.data = new_instancemethod(_wrpme.api_buffer_data,None,api_buffer)
api_buffer.size = new_instancemethod(_wrpme.api_buffer_size,None,api_buffer)
api_buffer_swigregister = _wrpme.api_buffer_swigregister
api_buffer_swigregister(api_buffer)

class handle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _wrpme.handle_swiginit(self,_wrpme.new_handle(*args))
    __swig_destroy__ = _wrpme.delete_handle
handle.close = new_instancemethod(_wrpme.handle_close,None,handle)
handle.set_timeout = new_instancemethod(_wrpme.handle_set_timeout,None,handle)
handle.put = new_instancemethod(_wrpme.handle_put,None,handle)
handle.update = new_instancemethod(_wrpme.handle_update,None,handle)
handle.get = new_instancemethod(_wrpme.handle_get,None,handle)
handle.get_update = new_instancemethod(_wrpme.handle_get_update,None,handle)
handle.compare_and_swap = new_instancemethod(_wrpme.handle_compare_and_swap,None,handle)
handle.remove = new_instancemethod(_wrpme.handle_remove,None,handle)
handle.remove_all = new_instancemethod(_wrpme.handle_remove_all,None,handle)
handle_swigregister = _wrpme.handle_swigregister
handle_swigregister(handle)


def get(*args):
  return _wrpme.get(*args)
get = _wrpme.get

def get_update(*args):
  return _wrpme.get_update(*args)
get_update = _wrpme.get_update

def compare_and_swap(*args):
  return _wrpme.compare_and_swap(*args)
compare_and_swap = _wrpme.compare_and_swap

def connect(*args):
  return _wrpme.connect(*args)
connect = _wrpme.connect


